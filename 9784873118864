[
    {
        "title": "超上級者向け",
        "comment": "めちゃくちゃ難しい\r\n大学生や入社1年目などには向かない。なぜなら現場にいることが前提の書物だから\r\n現場にいる人間でも理解できるかどうか...\r\n筆者もまだ理解できていないが、本当の価値は理解できるものにしかわからないと思う。",
        "good": 0
    },
    {
        "title": "批判的な内容も (from amazon review) \t",
        "comment": "実質的には「クライアント交渉担当のSEと開発者でストリーを共有しよう」「テスト駆動プログラミングをしよう」「アジャイルでやろう」と言ってるだけかなあ。\r\nしかも、それぞれを具体的に説明するというよりは、重要性を説く感じが多く、肩透かしを食らった感じでした。\r\n何度も同じ話をしたり、かなり時間を無駄にしたなという感じです。\r\n-- アマゾンカスタマーB VINE VOICE\r\n\r\nこの特徴はオライリー書籍の実用書に見られる特徴です。\r\n\r\n",
        "good": 0
    },
    {
        "title": "バックログを作る",
        "comment": "バックログは基本的に作りたいと思っているストーリーのリストである。テーマごと、ユーザーの種類ごと、目的など自分に合う方法で整理すれば良い。\r\n\r\nバックログは優先順位をつけるものではなく、並び替える点ものである。\r\n\r\nプロダクトオーナーは次に何を作るのかを伝える責任がある。ときに「いちばん重要」なものが何かはっきりしないことがある。ときには、2番目に重要機能だけど先に作ったほうがいいこともある。優先順位に縛られず柔軟に並び替えてタスクを行っていくことが大切である。\r\n\r\n引用\r\nhttps://qiita.com/kskumgk63/items/e8493acb1d0d4e5a9f11",
        "good": 0
    },
    {
        "title": "計測のヒント",
        "comment": "欠陥密度を計測する\r\n本番環境のコードをいつも欠陥が見つかるようなら開発プロセスが壊れていることを意味する。欠陥密度（コード1000行あたりのバグの数）はチームや時間をまたいで比較できる数少ない指標だ。\r\n\r\n欠陥検出までの時間を計測する\r\n欠陥が発生してから時間が経つごとに欠陥修正コストは指数関数的に増えていくことがわかっている。欠陥が混入したらすぐに修正することが一番コストが掛からない。",
        "good": 0
    },
    {
        "title": "第10章：まずテストを書く",
        "comment": "開発者がいつテストを書くのをやめるべきかわからないときに、「テストによるダメージ」が発生する。開発者がテストファースト開発を行う利点は、既存のコードを変更するときにサポートを得られることだ。しかし、あまりにも多くのテストを書いたり実装依存のテストを書いたりすると、テストの変更が難しくなる。こういったテストは変更しやすさの手助けになるどころか負担となり、コードの変更は困難になり時間がかかるようになる。かつて、退屈するまでテストを書くようにテスト駆動開発の熟練者に言われたことがある。退屈した時点で、おそらくそれ以上のテストを必要としないというのだ。\r\n\r\nテストは仕様であり、ふるまいを定義するものだ。テストをこのように捉えるとテストの適切な数と種類が明らかになる。コードを安全に変更するための最適なテストが提供されるだけではなく、実装にも集中できる。",
        "good": 0
    }
]